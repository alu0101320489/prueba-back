{"version":3,"file":"/home/daniel/sytw/backend/sytw_backend/src/routers/usuarioRouters/postUsuario.ts","sources":["/home/daniel/sytw/backend/sytw_backend/src/routers/usuarioRouters/postUsuario.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\nimport { Usuario } from '../../models/usuario';\n\nexport const postUsuarioRouter = express.Router();\n\nconst bcrypt = require('bcrypt');\n\nconst jwt = require('jsonwebtoken');\n/**\n * Funcion que crea un nuevo usuario y lo almacena en la base de datos.\n * Comprueba que los atributos que se van a editar estan permitidos.\n * Crea el objeto para modificar y lo actualiza.\n * Devolviendo estados en consecuencia a los errores.\n */\npostUsuarioRouter.post('/register', async (req, res) => {\n  bcrypt.hash(req.body.contraseña, 10, function(err, hash) {\n    req.body.contraseña = hash;\n    const usuario = new Usuario(req.body);\n    try {\n      usuario.save();\n      res.status(201).send(usuario);\n    } catch (error) {\n      res.status(400).send(error);\n    }\n  });\n  \n});\n\npostUsuarioRouter.post('/login', async (req, res) => {\n  bcrypt.hash(req.body.contraseña, 10, async function(err, hash) {\n    const filter = {nombre: req.body.nombre.toString()};\n\n    try {\n      const usuario = await Usuario.find(filter);\n\n      if (usuario.length !== 0) {\n        bcrypt.compare(req.body.contraseña,usuario[0].contraseña, (err, data) => {\n          if (err) throw err\n          if (data) {\n            const token = jwt.sign(JSON.stringify(usuario), 'stil');\n            return res.status(200).json({token, id: usuario[0]._id,nombre: usuario[0].nombre ,equipo: usuario[0].equipo});\n          } else {\n            return res.status(401).json({ msg: \"Invalid credencial\"})\n          }\n        })\n\n      }else {return res.status(404).json({ msg: \"Usuario incorrecto\"})}\n      \n    } catch (error) {\n      res.status(500).send(error);\n    }\n  });\n  \n});\n\npostUsuarioRouter.post('/test',verifyToken, (req,res) => {\n  res.json('Privado');\n})\n\nexport function verifyToken(req,res, next){\n  if(!req.headers.authorization) return res.status(401).json('No autorizado');\n\n  const token = req.headers.authorization.substr(7);\n  if(token!==''){\n    const content = jwt.verify(token,'stil');\n    req.data = content;\n    next();\n  }else{\n    res.status(401).json('Token vacio');\n  }\n}"]}