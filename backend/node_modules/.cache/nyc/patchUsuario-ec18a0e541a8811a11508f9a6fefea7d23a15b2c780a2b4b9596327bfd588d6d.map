{"version":3,"file":"/home/daniel/sytw/backend/sytw_backend/src/routers/usuarioRouters/patchUsuario.ts","sources":["/home/daniel/sytw/backend/sytw_backend/src/routers/usuarioRouters/patchUsuario.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iDAAmC;AACnC,kDAA+C;AAElC,QAAA,kBAAkB,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;AAEnD;;;;;GAKG;AACH,0BAAkB,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACtD,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE;QACjB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,KAAK,EAAE,uBAAuB;SAC/B,CAAC,CAAC;KACJ;IAED,MAAM,cAAc,GAAG,CAAC,QAAQ,CAAC,CAAC;IAClC,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC5C,MAAM,aAAa,GACjB,aAAa,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAEnE,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,KAAK,EAAE,yBAAyB;SACjC,CAAC,CAAC;KACJ;IAED,IAAI;QACF,MAAM,OAAO,GACX,MAAM,iBAAO,CAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,EAAE,GAAG,CAAC,IAAI,EAAE;YACzE,GAAG,EAAE,IAAI;YACT,aAAa,EAAE,IAAI;SACpB,CAAC,CAAC;QAEL,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;SAC/B;QAED,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC1B;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACpC;AACH,CAAC,CAAC,CAAC","sourcesContent":["import * as express from 'express';\nimport { Usuario } from '../../models/usuario';\n\nexport const patchUsuarioRouter = express.Router();\n\n/**\n * Funcion que actualiza los datos de un usuario por id.\n * Comprueba que los atributos que se van a editar estan permitidos.\n * Crea el objeto para modificar y lo actualiza.\n * Devolviendo estados en consecuencia a los errores.\n */\npatchUsuarioRouter.patch('/usuario', async (req, res) => {\n  if (!req.query.id) {\n    return res.status(400).send({\n      error: 'Se debe proveer un id',\n    });\n  }\n\n  const allowedUpdates = ['equipo'];\n  const actualUpdates = Object.keys(req.body);\n  const isValidUpdate =\n    actualUpdates.every((update) => allowedUpdates.includes(update));\n\n  if (!isValidUpdate) {\n    return res.status(400).send({\n      error: 'Update is not permitted',\n    });\n  }\n\n  try {\n    const usuario =\n      await Usuario.findOneAndUpdate({ _id: req.query.id.toString() }, req.body, {\n        new: true,\n        runValidators: true,\n      });\n\n    if (!usuario) {\n      return res.status(404).send();\n    }\n\n    return res.send(usuario);\n  } catch (error) {\n    return res.status(400).send(error);\n  }\n});\n"]}